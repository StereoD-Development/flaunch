#
# Sdpm wrapper pluggin for developing cross-repo packages
#

props:

  _sdpm_platform_server:
    unix: /mnt/isilon2
    windows: //isilon2

  _sdpm_platform_arch:
    linux: x86_64-Linux
    windows: AMD64-Windows

  _sdpm_archive:
    unix: sdpm.tar.gz
    windows: sdpm.zip

  _sdpm_deploy_location: "{_sdpm_platform_server}/s3d/resources/sw/packages/{package}"

  # -- Test
  # _sdpm_deploy_location:
  #   - windows: "C:/repo/temp/sdpm_deploy/{package}"
  #     unix: "/temp/sdpm_deploy/{package}"

  _sdpm_dev_build: "{source_dir}/dev/dist/{_sdpm_platform_arch}"

  # -- This is where the overloading will come in.
  # Each sdpm supported build file will have to create
  # their own sdpm.rc string
  sdpm_rc_file: |
    import os
    class SdpmRc(SdpmRcBase):
      """ Default SDPM wrapper for fbuild """
      def pathEnv(self):
        return { "PATH": [self._path] }


#
# Alas, sdpm builds dev within source. No fun, but that's the
# way the cookie crumbles.
#
func__sdpm_dev_build():
  - ":DEL {source_dir}/dev"
  - ":MKDIR -s {_sdpm_dev_build}"
  - ":COPY -f {build_dir}/* {_sdpm_dev_build} -x launch.json"
  - ":WRITE {sdpm_rc_file} {_sdpm_dev_build}/sdpm.rc"


#
# Clean away our development files
#
func__sdpm_clean_dev_build():
  - ":DEL {source_dir}/dev"


#
# Deployment of an sdpm package is another story completely.
#
func__sdpm_deploy_simple(sdpm_version, sdpm_fix_number):
  - ":SET {_sdpm_deploy_location}/{sdpm_version}/{sdpm_fix_number}/{_sdpm_platform_arch} deployment_loc"
  - ":DEL {deployment_loc}"
  - ":MKDIR -s {deployment_loc}"
  - ":CD {build_dir}" # Should already be there but just in case
  - windows: ":ZIP ../{_sdpm_archive} -f ./"
    unix: tar -cvzf ../{_sdpm_archive} ./*
  - ":COPY -f {build_dir}/* {deployment_loc}"
  - ":MOVE -f ../{_sdpm_archive} {deployment_loc}"
  - ":WRITE {sdpm_rc_file} {deployment_loc}/sdpm.rc"
  - ":CD --pop" # Go back to where we were


#
# Deploy a pre-exhisting flaunch package as a sdpm package
#
func__sdpm_deploy_flaunch_package(package_path, sdpm_verison, sdpm_fix_number):
  - ":SET {_sdpm_deploy_location}/{sdpm_version}/{sdpm_fix_number}/{_sdpm_platform_arch} deployment_loc"
  - ":COPY {package_path} {deployment_loc}/sdpm.zip"
  - ":WRITE {sdpm_rc_file} {deployment_loc}/sdpm.rc"


build:

  pre_build:
    - ['--sdpm-clean', ":FUNC sdpm_clean_dev_build()"]

  #
  # -- Overload the post build process to make an sdpm build if the argument
  # is supplied
  #
  post_build:
    - ["--sdpm", ":FUNC sdpm_dev_build()"]


raw:

  sdpm_clean:

    help: |
      Clean out the sdpm build directory (typically located
      in your source dir under dev/)

    commands:
      - ":FUNC sdpm_clean_dev_build()"


  sdpm_deploy:

    help: |
      Deploy built files as an sdpm capable pacakge. Must build
      locally before running this command for that's what will
      be deployed.

    arguments:
      - [sdpm_version,    Major.Minor.Subminor version to deploy to, '[0-9]+\.[0-9]+\.[0-9]+']
      - [sdpm_fix_number, "#### fix number", '[0-9]{4}']

    commands:
      - ":FUNC sdpm_deploy_simple({sdpm_version}, {sdpm_fix_number})"
