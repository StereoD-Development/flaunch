#
# Sdpm wrapper pluggin for developing cross-repo packages
#

props:

  _sdpm_platform_server:
    unix: /mnt/isilon2
    windows: //isilon2

  _sdpm_platform_arch:
    linux: x86_64-Linux
    windows: AMD64-Windows

  _sdpm_archive:
    unix: sdpm.tar.gz
    windows: sdpm.zip

  _sdpm_deploy_location: "{_sdpm_platform_server}/s3d/resources/sw/packages/{package}"

  # -- Test
  # _sdpm_deploy_location:
  #   - windows: "C:/repo/temp/sdpm_deploy/{package}"
  #     unix: "/temp/sdpm_deploy/{package}"

  _sdpm_dev_build: "{source_dir}/dev/dist/{_sdpm_platform_arch}"

  # -- This is where the overloading will come in.
  # Each sdpm supported build file will have to create
  # their own sdpm.rc string
  sdpm_rc_file: |
    import os
    class SdpmRc(SdpmRcBase):
        """ Default SDPM wrapper for fbuild """
        def pathEnv(self):
            return { "PATH": [self._path] }

  # -- This is where we can add additional logic for the exclusion
  #    or inclusion of specific files within the sdpm deployment
  sdpm_extra_zip_copy_args: ""


#
# Alas, sdpm builds dev within source. No fun, but that's the
# way the cookie crumbles. (Techniacally this can be changed
# with the SDPM_PATH but meh.)
#
func__sdpm_dev_build():
  - ":DEL {source_dir}/dev"
  - ":MKDIR -s {_sdpm_dev_build}"
  - ":FUNC get_complete_files_path()"
  - ":COPY -f {complete_files}/* {_sdpm_dev_build} -x launch.json"
  # - ":ZIP {_sdpm_dev_build}/../sdpm.zip -f {_sdpm_dev_build}/*"
  # - ":MOVE --force {_sdpm_dev_build}/../sdpm.zip {_sdpm_dev_build}/sdpm.zip"
  - ":WRITE {sdpm_rc_file} {_sdpm_dev_build}/sdpm.rc"


#
# Clean away our development files
#
func__sdpm_clean_dev_build():
  - ":DEL {source_dir}/dev"


#
# Deployment of an sdpm package is another story completely.
#
func__sdpm_deploy_simple(sdpm_version, sdpm_fix_number, to_platform):
  - clause: '"{to_platform}".lower() == "windows"'
    commands:
      [
        ":SET -g AMD64-Windows sdpm_arch",
        ":SET -g sdpm.zip sdpm_archive",
        ":SET {_sdpm_deploy_location}/{sdpm_version}/{sdpm_fix_number}/{sdpm_arch} deployment_loc",
        ":DEL {deployment_loc}",
        ":SET {_sdpm_deploy_location}/temp/{sdpm_version}/{sdpm_fix_number}/{sdpm_arch} move_loc",
        ":MKDIR -s {move_loc}",
        ":FUNC get_complete_files_path()",
        ":CD {complete_files}",
        ":ZIP {sdpm_extra_zip_copy_args...} ../{sdpm_archive} -f ./ -n"
      ]
    else_commands:
      [
        # -- Linux deployment
        ":SET -g x86_64-Linux sdpm_arch",
        ":SET -g sdpm.tar.gz sdpm_archive",
        ":SET {_sdpm_deploy_location}/{sdpm_version}/{sdpm_fix_number}/{sdpm_arch} deployment_loc",
        ":DEL {deployment_loc}",
        ":SET {_sdpm_deploy_location}/temp/{sdpm_version}/{sdpm_fix_number}/{sdpm_arch} move_loc",
        ":MKDIR -s {move_loc}",
        ":FUNC get_complete_files_path()",
        ":CD {complete_files}",
        ":TAR {sdpm_extra_zip_copy_args...} ../{sdpm_archive} -f ./* -n"
      ]
  - ":MOVE --make-dirs -f ../{sdpm_archive} {move_loc}/{sdpm_archive}" # We only need the archive
  - ":MKDIR -s {deployment_loc}"
  - ":MOVE --make-dirs -f {move_loc}/{sdpm_archive} {deployment_loc}/{sdpm_archive}" # Move from temp to the real directory
  - ":WRITE {sdpm_rc_file} {deployment_loc}/sdpm.rc"
  - ":CD --pop" # Go back to where we were


#
# Deploy a pre-exhisting flaunch package as a sdpm package
#
func__sdpm_deploy_flaunch_package(package_path, sdpm_verison, sdpm_fix_number):
  - ":SET {_sdpm_deploy_location}/{sdpm_version}/{sdpm_fix_number}/{_sdpm_platform_arch} deployment_loc"
  - ":COPY --make-dirs {package_path} {deployment_loc}/sdpm.zip"
  - ":WRITE {sdpm_rc_file} {deployment_loc}/sdpm.rc"


#
# Old-school transfer command for sdpm packages from toronto.
#
func__sdpm_transfer_to_facilities(sdpm_full_version):
  - ':SET "verbose localize env prepend python/2.7.2 localize launch TransferTools -n signiant basic" sdpm_transfer_command'
  - ':SET "python {_sdpm_platform_server}/s3d/resources/sw/scripts/sdpm.py" sdpm_command'
  - "{sdpm_command...} {sdpm_transfer_command...} /mnt/isilon2/s3d/resources/sw/packages/{package}/{sdpm_full_version} tor bur"
  - "{sdpm_command...} {sdpm_transfer_command...} /mnt/isilon2/s3d/resources/sw/packages/{package}/{sdpm_full_version} tor pun"


func__sdpm_custom_transfer(dpackage, verison, hotfit):
  - ':SET "verbose localize env prepend python/2.7.2 localize launch TransferTools -n signiant basic" sdpm_transfer_command'
  - ':SET "python {_sdpm_platform_server}/s3d/resources/sw/scripts/sdpm.py" sdpm_command'
  - "{sdpm_command...} {sdpm_transfer_command...} /mnt/isilon2/s3d/resources/sw/packages/{dpackage}/{sdpm_full_version} tor bur"
  - "{sdpm_command...} {sdpm_transfer_command...} /mnt/isilon2/s3d/resources/sw/packages/{dpackage}/{sdpm_full_version} tor pun"
 

build:

  pre_build:
    - ['--sdpm-clean', ":FUNC sdpm_clean_dev_build()"]

  #
  # -- Overload the post build process to make an sdpm build if the argument
  # is supplied
  #
  post_build:
    - ["--sdpm", ":FUNC sdpm_dev_build()"]
    - ":SUPER global.build.post_build"


raw:

  sdpm_clean:

    help: |
      Clean out the sdpm build directory (typically located
      in your source dir under dev/)

    commands:
      - ":FUNC sdpm_clean_dev_build()"


  sdpm_deploy:

    help: |
      Deploy built files as an sdpm capable pacakge. Must build
      locally before running this command for that's what will
      be deployed.

    arguments:
      - [sdpm_version, Major.Minor.Subminor version to deploy to, '[0-9]+\.[0-9]+\.[0-9]+']
      - [sdpm_fix_number, "#### fix number", '[0-9]{4}']

    flags:
      - ["winlin", Deploy for both Windows and Linux at the same time]
      - ["transfer", "Auto-transfer the deployment (Use winlin and this to do it all)"]

    commands:
      - ":FUNC sdpm_deploy_simple({sdpm_version}, {sdpm_fix_number}, {platform})"
      - ["--winlin",
          {
            # -- Deploy to the other platform
            windows: ":FUNC sdpm_deploy_simple({sdpm_version}, {sdpm_fix_number}, Linux)",
            unix: ":FUNC sdpm_deploy_simple({sdpm_version}, {sdpm_fix_number}, Windows)"
          }
        ]
      - ["--transfer",
          [
            ":SET {sdpm_version}/{sdpm_fix_number} sdpm_full_version",
            ":FUNC sdpm_transfer_to_facilities({sdpm_full_version})"
          ]
        ]

  sdpm_transfer:

    help: |
      Transfer a deployed package to other sdpm facilities (at the
      moment this is locked to Toronto as the source only)

    arguments:
      - [sdpm_full_version, "Major.Minor.Subminor/#### version to transfer", '[0-9]+\.[0-9]+\.[0-9]+\/[0-9]{4}']

    commands:
      - ":FUNC sdpm_transfer_to_facilities({sdpm_full_version})"

  sdpm_full_transfer:

    help: |
      Transfer a deployed package to other sdpm facilities (at the
      moment this is locked to Toronto as the source only)

    arguments:
      - [dpackage, "pgk"]
      - [sdpm_full_version, "Major.Minor.Subminor/#### version to transfer", '[0-9]+\.[0-9]+\.[0-9]+\/[0-9]{4}']

    commands:
      - ":FUNC sdpm_custom_transfer({dpackage}, {sdpm_full_version})"
